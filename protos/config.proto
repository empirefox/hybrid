syntax = "proto3";

package protos;
option go_package = "github.com/empirefox/hybrid/config";

message ConfigTree {
  string version = 1;
  string rootName = 2;
  string rootPath = 3;
  string configName = 4;
  string configPath = 5;
  string ipfsName = 6;
  string ipfsPath = 7;
  string storeName = 8;
  string storePath = 9;
  string filesRootName = 10;
  string filesRootPath = 11;
  string rulesRootName = 12;
  string rulesRootPath = 13;
}

message Basic {
  // @inject_tag: toml:",omitempty"
  string version = 1;
  // @inject_tag: toml:",omitempty" env:"HYBRID_DEV"
  bool dev = 2;
  // @inject_tag: toml:",omitempty" env:"HYBRID_BIND validate:"omitempty,tcp_addr"
  string bind = 3;

  // @inject_tag: toml:",omitempty" default:"200"
  uint32 flushIntervalMs = 4;

  // @inject_tag: toml:",omitempty" validate:"lte=732"
  // Token is fallback token that will be veried by servers, both Ipfs
  string token = 5;
}

message Log {
  // @inject_tag: toml:",omitempty"
  bool dev = 1;
  // @inject_tag: toml:",omitempty" validate:"omitempty,oneof=debug info warn error dpanic panic fatal"
  string level = 2;
  // @inject_tag: toml:",omitempty"
  // Target accepts "tcp://host:port?timeout=5s", file, sentryDSN or empty.
  // Register NewTCPSink to support tcp sink. Default is stderr.
  string target = 3;
}

message Ipfs {
  // @inject_tag: toml:",omitempty" validate:"tcp_addr" default:"127.0.127.1:1270"
  string fakeApiListenAddr = 1;

  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string gatewayServerName = 2;
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string apiServerName = 3;

  // @inject_tag: toml:",omitempty" validate:"unique"
  repeated string profile = 4;
  // @inject_tag: toml:",omitempty"
  bool autoMigrate = 5;
  // @inject_tag: toml:",omitempty"
  bool enableIpnsPubSub = 6;
  // @inject_tag: toml:",omitempty"
  bool enablePubSub = 7;
  // @inject_tag: toml:",omitempty"
  bool enableMultiplex = 8;

  // @inject_tag: toml:",omitempty" validate:"lte=732"
  string token = 9;
}

// server types

message IpfsServer {
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string name = 1;
  // @inject_tag: toml:",omitempty" validate:"required"
  string peer = 2;
  // @inject_tag: toml:",omitempty" validate:"lte=732"
  string token = 3;
}

message FileServer {
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string name = 1;
  // @inject_tag: toml:",omitempty" validate:"hostname"
  string zip = 2;
  // @inject_tag: toml:",omitempty"
  map<string, string> redirect = 3;
  // @inject_tag: toml:",omitempty"
  bool dev = 4;
}

message HttpProxyServer {
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string name = 1;
  // @inject_tag: toml:",omitempty" validate:"tcp_addr"
  string host = 2;
  // @inject_tag: toml:",omitempty"
  bool keepAlive = 3;
}

// server types end

// routers

message AdpRouter {
  // @inject_tag: toml:",omitempty" validate:"hostname"
  // *.b64 is base64 encoded.
  // *.ipfs is fetched from ipfs network.
  // ipfs file is of toml format:
  //   [[Ipfs]]
  //   Path = "Qmxxx..xA"
  //   Base64 = true
  //
  //   [[Ipfs]]
  //   Path = "Qmxxx..xB"
  string rulesDirName = 1;
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string blocked = 2;
  // @inject_tag: toml:",omitempty" omitempty,hostname,nefield=Blocked"
  string unblocked = 3;
  // @inject_tag: toml:",omitempty"
  bool etcHostsIpAsBlocked = 4;
  // @inject_tag: toml:",omitempty"
  bool dev = 5;
}

message IPNetRouter {
  // @inject_tag: toml:",omitempty" validate:"dive,ip"
  repeated string ip = 1;
  // @inject_tag: toml:",omitempty" validate:"dive,cidr"
  repeated string net = 2;
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string matched = 3;
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname,nefield=Matched"
  string unmatched = 4;
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string fileTest = 5;
}

// routers end

message RouterItem {
  // @inject_tag: toml:",omitempty" validate:"omitempty,hostname"
  string name = 1;
  oneof router {
    AdpRouter adp = 2;
    IPNetRouter ipnet = 3;
  }
}

// reserved names: DIRECT over with hybrid
// env:
// HYBRID_ROOT_PATH=$HOME/.hybrid
// HYBRID_DEV=false
// HYBRID_BIND=:7777
// HYBRID_FILE_SERVERS_DISABLED=a,b,c
// HYBRID_ROUTER_DISABLED=a,b,c
// @inject_field: tree *ConfigTree
message Config {
  Basic basic = 1;
  Log log = 2;
  Ipfs ipfs = 3;

  repeated IpfsServer ipfsServers = 4;
  repeated FileServer fileServers = 5;
  repeated HttpProxyServer httpProxyServers = 6;

  repeated RouterItem routers = 7;
}